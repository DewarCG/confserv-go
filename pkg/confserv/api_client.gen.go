// Package confserv provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package confserv

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// Defines values for TemplateItemRequestType.
const (
	Boolean TemplateItemRequestType = "boolean"
	Date    TemplateItemRequestType = "date"
	Enum    TemplateItemRequestType = "enum"
	Number  TemplateItemRequestType = "number"
	String  TemplateItemRequestType = "string"
)

// AppRequest defines model for AppRequest.
type AppRequest struct {
	// App name
	Name   string   `json:"name"`
	Scopes []string `json:"scopes"`
}

// AppResponse defines model for AppResponse.
type AppResponse struct {
	Authorizations []AppScopeAuthItem `json:"authorizations"`
}

// AppScopeAuthItem defines model for AppScopeAuthItem.
type AppScopeAuthItem struct {
	Scope string `json:"scope"`
	Token string `json:"token"`
}

// CodeResult defines model for CodeResult.
type CodeResult struct {
	Result *bool `json:"result,omitempty"`
}

// SettingRequest defines model for SettingRequest.
type SettingRequest struct {
	Key   string      `json:"key"`
	Value interface{} `json:"value"`
}

// SettingResponse defines model for SettingResponse.
type SettingResponse struct {
	Value interface{} `json:"value"`
}

// TemplateItemRequest defines model for TemplateItemRequest.
type TemplateItemRequest struct {
	Default *string `json:"default,omitempty"`

	// Optional description
	Description *string   `json:"description,omitempty"`
	Enum        *[]string `json:"enum,omitempty"`
	Key         string    `json:"key"`

	// Json schema value
	Schema *map[string]interface{}  `json:"schema,omitempty"`
	Type   *TemplateItemRequestType `json:"type,omitempty"`
}

// TemplateItemRequestType defines model for TemplateItemRequest.Type.
type TemplateItemRequestType string

// TemplateRequest defines model for TemplateRequest.
type TemplateRequest struct {
	FileName string  `json:"fileName"`
	Name     *string `json:"name,omitempty"`
}

// CreateAppJSONBody defines parameters for CreateApp.
type CreateAppJSONBody = AppRequest

// GetSettingByKeyParams defines parameters for GetSettingByKey.
type GetSettingByKeyParams struct {
	Authorization string `json:"Authorization"`
}

// CreateTemplateJSONBody defines parameters for CreateTemplate.
type CreateTemplateJSONBody = TemplateRequest

// CreateTemplateItemJSONBody defines parameters for CreateTemplateItem.
type CreateTemplateItemJSONBody = TemplateItemRequest

// UpdateSettingJSONBody defines parameters for UpdateSetting.
type UpdateSettingJSONBody = SettingRequest

// CreateSettingJSONBody defines parameters for CreateSetting.
type CreateSettingJSONBody = SettingRequest

// CreateAppJSONRequestBody defines body for CreateApp for application/json ContentType.
type CreateAppJSONRequestBody = CreateAppJSONBody

// CreateTemplateJSONRequestBody defines body for CreateTemplate for application/json ContentType.
type CreateTemplateJSONRequestBody = CreateTemplateJSONBody

// CreateTemplateItemJSONRequestBody defines body for CreateTemplateItem for application/json ContentType.
type CreateTemplateItemJSONRequestBody = CreateTemplateItemJSONBody

// UpdateSettingJSONRequestBody defines body for UpdateSetting for application/json ContentType.
type UpdateSettingJSONRequestBody = UpdateSettingJSONBody

// CreateSettingJSONRequestBody defines body for CreateSetting for application/json ContentType.
type CreateSettingJSONRequestBody = CreateSettingJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateApp request with any body
	CreateAppWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateApp(ctx context.Context, body CreateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingByKey request
	GetSettingByKey(ctx context.Context, key string, params *GetSettingByKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTemplate request with any body
	CreateTemplateWithBody(ctx context.Context, app string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTemplate(ctx context.Context, app string, body CreateTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTemplateItem request with any body
	CreateTemplateItemWithBody(ctx context.Context, app string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTemplateItem(ctx context.Context, app string, body CreateTemplateItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSetting request with any body
	UpdateSettingWithBody(ctx context.Context, app string, scope string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSetting(ctx context.Context, app string, scope string, body UpdateSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSetting request with any body
	CreateSettingWithBody(ctx context.Context, app string, scope string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSetting(ctx context.Context, app string, scope string, body CreateSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSetting request
	DeleteSetting(ctx context.Context, app string, scope string, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSetting request
	GetSetting(ctx context.Context, app string, scope string, key string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateAppWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAppRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApp(ctx context.Context, body CreateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAppRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingByKey(ctx context.Context, key string, params *GetSettingByKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingByKeyRequest(c.Server, key, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTemplateWithBody(ctx context.Context, app string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTemplateRequestWithBody(c.Server, app, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTemplate(ctx context.Context, app string, body CreateTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTemplateRequest(c.Server, app, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTemplateItemWithBody(ctx context.Context, app string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTemplateItemRequestWithBody(c.Server, app, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTemplateItem(ctx context.Context, app string, body CreateTemplateItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTemplateItemRequest(c.Server, app, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSettingWithBody(ctx context.Context, app string, scope string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSettingRequestWithBody(c.Server, app, scope, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSetting(ctx context.Context, app string, scope string, body UpdateSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSettingRequest(c.Server, app, scope, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSettingWithBody(ctx context.Context, app string, scope string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSettingRequestWithBody(c.Server, app, scope, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSetting(ctx context.Context, app string, scope string, body CreateSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSettingRequest(c.Server, app, scope, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSetting(ctx context.Context, app string, scope string, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSettingRequest(c.Server, app, scope, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSetting(ctx context.Context, app string, scope string, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingRequest(c.Server, app, scope, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateAppRequest calls the generic CreateApp builder with application/json body
func NewCreateAppRequest(server string, body CreateAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAppRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAppRequestWithBody generates requests for CreateApp with any type of body
func NewCreateAppRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/app")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingByKeyRequest generates requests for GetSettingByKey
func NewGetSettingByKeyRequest(server string, key string, params *GetSettingByKeyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setting/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Authorization", headerParam0)

	return req, nil
}

// NewCreateTemplateRequest calls the generic CreateTemplate builder with application/json body
func NewCreateTemplateRequest(server string, app string, body CreateTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTemplateRequestWithBody(server, app, "application/json", bodyReader)
}

// NewCreateTemplateRequestWithBody generates requests for CreateTemplate with any type of body
func NewCreateTemplateRequestWithBody(server string, app string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "app", runtime.ParamLocationPath, app)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/admin/template", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateTemplateItemRequest calls the generic CreateTemplateItem builder with application/json body
func NewCreateTemplateItemRequest(server string, app string, body CreateTemplateItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTemplateItemRequestWithBody(server, app, "application/json", bodyReader)
}

// NewCreateTemplateItemRequestWithBody generates requests for CreateTemplateItem with any type of body
func NewCreateTemplateItemRequestWithBody(server string, app string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "app", runtime.ParamLocationPath, app)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/admin/template-item", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateSettingRequest calls the generic UpdateSetting builder with application/json body
func NewUpdateSettingRequest(server string, app string, scope string, body UpdateSettingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSettingRequestWithBody(server, app, scope, "application/json", bodyReader)
}

// NewUpdateSettingRequestWithBody generates requests for UpdateSetting with any type of body
func NewUpdateSettingRequestWithBody(server string, app string, scope string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "app", runtime.ParamLocationPath, app)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scope", runtime.ParamLocationPath, scope)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/%s/setting", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateSettingRequest calls the generic CreateSetting builder with application/json body
func NewCreateSettingRequest(server string, app string, scope string, body CreateSettingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSettingRequestWithBody(server, app, scope, "application/json", bodyReader)
}

// NewCreateSettingRequestWithBody generates requests for CreateSetting with any type of body
func NewCreateSettingRequestWithBody(server string, app string, scope string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "app", runtime.ParamLocationPath, app)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scope", runtime.ParamLocationPath, scope)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/%s/setting", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSettingRequest generates requests for DeleteSetting
func NewDeleteSettingRequest(server string, app string, scope string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "app", runtime.ParamLocationPath, app)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scope", runtime.ParamLocationPath, scope)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/%s/setting/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSettingRequest generates requests for GetSetting
func NewGetSettingRequest(server string, app string, scope string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "app", runtime.ParamLocationPath, app)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scope", runtime.ParamLocationPath, scope)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/%s/setting/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateApp request with any body
	CreateAppWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAppResponse, error)

	CreateAppWithResponse(ctx context.Context, body CreateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAppResponse, error)

	// GetSettingByKey request
	GetSettingByKeyWithResponse(ctx context.Context, key string, params *GetSettingByKeyParams, reqEditors ...RequestEditorFn) (*GetSettingByKeyResponse, error)

	// CreateTemplate request with any body
	CreateTemplateWithBodyWithResponse(ctx context.Context, app string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTemplateResponse, error)

	CreateTemplateWithResponse(ctx context.Context, app string, body CreateTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTemplateResponse, error)

	// CreateTemplateItem request with any body
	CreateTemplateItemWithBodyWithResponse(ctx context.Context, app string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTemplateItemResponse, error)

	CreateTemplateItemWithResponse(ctx context.Context, app string, body CreateTemplateItemJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTemplateItemResponse, error)

	// UpdateSetting request with any body
	UpdateSettingWithBodyWithResponse(ctx context.Context, app string, scope string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSettingResponse, error)

	UpdateSettingWithResponse(ctx context.Context, app string, scope string, body UpdateSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSettingResponse, error)

	// CreateSetting request with any body
	CreateSettingWithBodyWithResponse(ctx context.Context, app string, scope string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSettingResponse, error)

	CreateSettingWithResponse(ctx context.Context, app string, scope string, body CreateSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSettingResponse, error)

	// DeleteSetting request
	DeleteSettingWithResponse(ctx context.Context, app string, scope string, key string, reqEditors ...RequestEditorFn) (*DeleteSettingResponse, error)

	// GetSetting request
	GetSettingWithResponse(ctx context.Context, app string, scope string, key string, reqEditors ...RequestEditorFn) (*GetSettingResponse, error)
}

type CreateAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppResponse
}

// Status returns HTTPResponse.Status
func (r CreateAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingByKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingResponse
}

// Status returns HTTPResponse.Status
func (r GetSettingByKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingByKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CodeResult
}

// Status returns HTTPResponse.Status
func (r CreateTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTemplateItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CodeResult
}

// Status returns HTTPResponse.Status
func (r CreateTemplateItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTemplateItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSettingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CodeResult
}

// Status returns HTTPResponse.Status
func (r UpdateSettingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSettingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSettingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CodeResult
}

// Status returns HTTPResponse.Status
func (r CreateSettingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSettingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSettingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CodeResult
}

// Status returns HTTPResponse.Status
func (r DeleteSettingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSettingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingResponse
}

// Status returns HTTPResponse.Status
func (r GetSettingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateAppWithBodyWithResponse request with arbitrary body returning *CreateAppResponse
func (c *ClientWithResponses) CreateAppWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAppResponse, error) {
	rsp, err := c.CreateAppWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAppResponse(rsp)
}

func (c *ClientWithResponses) CreateAppWithResponse(ctx context.Context, body CreateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAppResponse, error) {
	rsp, err := c.CreateApp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAppResponse(rsp)
}

// GetSettingByKeyWithResponse request returning *GetSettingByKeyResponse
func (c *ClientWithResponses) GetSettingByKeyWithResponse(ctx context.Context, key string, params *GetSettingByKeyParams, reqEditors ...RequestEditorFn) (*GetSettingByKeyResponse, error) {
	rsp, err := c.GetSettingByKey(ctx, key, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingByKeyResponse(rsp)
}

// CreateTemplateWithBodyWithResponse request with arbitrary body returning *CreateTemplateResponse
func (c *ClientWithResponses) CreateTemplateWithBodyWithResponse(ctx context.Context, app string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTemplateResponse, error) {
	rsp, err := c.CreateTemplateWithBody(ctx, app, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTemplateResponse(rsp)
}

func (c *ClientWithResponses) CreateTemplateWithResponse(ctx context.Context, app string, body CreateTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTemplateResponse, error) {
	rsp, err := c.CreateTemplate(ctx, app, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTemplateResponse(rsp)
}

// CreateTemplateItemWithBodyWithResponse request with arbitrary body returning *CreateTemplateItemResponse
func (c *ClientWithResponses) CreateTemplateItemWithBodyWithResponse(ctx context.Context, app string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTemplateItemResponse, error) {
	rsp, err := c.CreateTemplateItemWithBody(ctx, app, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTemplateItemResponse(rsp)
}

func (c *ClientWithResponses) CreateTemplateItemWithResponse(ctx context.Context, app string, body CreateTemplateItemJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTemplateItemResponse, error) {
	rsp, err := c.CreateTemplateItem(ctx, app, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTemplateItemResponse(rsp)
}

// UpdateSettingWithBodyWithResponse request with arbitrary body returning *UpdateSettingResponse
func (c *ClientWithResponses) UpdateSettingWithBodyWithResponse(ctx context.Context, app string, scope string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSettingResponse, error) {
	rsp, err := c.UpdateSettingWithBody(ctx, app, scope, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSettingResponse(rsp)
}

func (c *ClientWithResponses) UpdateSettingWithResponse(ctx context.Context, app string, scope string, body UpdateSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSettingResponse, error) {
	rsp, err := c.UpdateSetting(ctx, app, scope, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSettingResponse(rsp)
}

// CreateSettingWithBodyWithResponse request with arbitrary body returning *CreateSettingResponse
func (c *ClientWithResponses) CreateSettingWithBodyWithResponse(ctx context.Context, app string, scope string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSettingResponse, error) {
	rsp, err := c.CreateSettingWithBody(ctx, app, scope, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSettingResponse(rsp)
}

func (c *ClientWithResponses) CreateSettingWithResponse(ctx context.Context, app string, scope string, body CreateSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSettingResponse, error) {
	rsp, err := c.CreateSetting(ctx, app, scope, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSettingResponse(rsp)
}

// DeleteSettingWithResponse request returning *DeleteSettingResponse
func (c *ClientWithResponses) DeleteSettingWithResponse(ctx context.Context, app string, scope string, key string, reqEditors ...RequestEditorFn) (*DeleteSettingResponse, error) {
	rsp, err := c.DeleteSetting(ctx, app, scope, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSettingResponse(rsp)
}

// GetSettingWithResponse request returning *GetSettingResponse
func (c *ClientWithResponses) GetSettingWithResponse(ctx context.Context, app string, scope string, key string, reqEditors ...RequestEditorFn) (*GetSettingResponse, error) {
	rsp, err := c.GetSetting(ctx, app, scope, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingResponse(rsp)
}

// ParseCreateAppResponse parses an HTTP response from a CreateAppWithResponse call
func ParseCreateAppResponse(rsp *http.Response) (*CreateAppResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSettingByKeyResponse parses an HTTP response from a GetSettingByKeyWithResponse call
func ParseGetSettingByKeyResponse(rsp *http.Response) (*GetSettingByKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingByKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateTemplateResponse parses an HTTP response from a CreateTemplateWithResponse call
func ParseCreateTemplateResponse(rsp *http.Response) (*CreateTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CodeResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateTemplateItemResponse parses an HTTP response from a CreateTemplateItemWithResponse call
func ParseCreateTemplateItemResponse(rsp *http.Response) (*CreateTemplateItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTemplateItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CodeResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateSettingResponse parses an HTTP response from a UpdateSettingWithResponse call
func ParseUpdateSettingResponse(rsp *http.Response) (*UpdateSettingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSettingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CodeResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSettingResponse parses an HTTP response from a CreateSettingWithResponse call
func ParseCreateSettingResponse(rsp *http.Response) (*CreateSettingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSettingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CodeResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteSettingResponse parses an HTTP response from a DeleteSettingWithResponse call
func ParseDeleteSettingResponse(rsp *http.Response) (*DeleteSettingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSettingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CodeResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSettingResponse parses an HTTP response from a GetSettingWithResponse call
func ParseGetSettingResponse(rsp *http.Response) (*GetSettingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
